---
import Layout from '../layouts/Layout.astro';
import fetchApi from '../lib/strapi';
import BookCard from '../components/Cards.astro'; // Import the reusable BookCard component

// Fetch categories, authors, and books
const categories = await fetchApi({
  endpoint: 'categories',
  query: { populate: 'books.cover' },
  wrappedByKey: 'data',
});

const authors = await fetchApi({
  endpoint: 'authors',
  query: { populate: 'books.cover' },
  wrappedByKey: 'data',
});

const books = await fetchApi({
  endpoint: "books",
  query: { populate: ["categories", "authors", "cover"] },
  wrappedByKey: "data",
});
---

<Layout>
  <section>
    <h2>Books</h2>

    <!-- Categories Section with checkboxes -->
    <h3>Categories</h3>
    <ul>
      {categories.map((category) => (
        <li>
          <label>
            <span>{category.name}</span>
            <input
              class="filteroption category-filter"
              type="checkbox"
              value={category.slug}
              name="category-filter"
              data-type="category"
            />
          </label>
        </li>
      ))}
    </ul>

    <!-- Authors Section with checkboxes -->
    <h3>Authors</h3>
    <ul>
      {authors.map((author) => (
        <li>
          <label>
            <span>{author.name}</span>
            <input
              class="filteroption author-filter"
              type="checkbox"
              value={author.slug}
              name="author-filter"
              data-type="author"
            />
          </label>
        </li>
      ))}
    </ul>

    <!-- Books Section -->
    <div id="book-container" class="card-container">
      {books.map((book) => {
        const thumbnailUrl = book.cover?.url || "/placeholder-image.jpg";

        // Safe handling of categories and authors using default empty arrays
        const categories = Array.isArray(book.categories) ? book.categories.map(c => c.slug) : [];
        const authors = Array.isArray(book.authors) ? book.authors.map(a => a.slug) : [];

        return (
          <div
            class="book-card"
            data-category={categories.join(', ')}
            data-author={authors.join(', ')}
          >
            <BookCard
              book={book}
              thumbnailUrl={import.meta.env.STRAPI_URL + thumbnailUrl}
            />
          </div>
        );
      })}
    </div>
  </section>
</Layout>

<script>
  let activeFilter = {
    category: null,
    author: null,
  };

  const handleOptionChange = (e) => {
    const selectedCategories = [
      ...document.querySelectorAll("input[name='category-filter']:checked"),
    ].map(($input) => $input.value);

    const selectedAuthors = [
      ...document.querySelectorAll("input[name='author-filter']:checked"),
    ].map(($input) => $input.value);

    // If a category is selected, uncheck all author filters
    if (selectedCategories.length > 0) {
      document.querySelectorAll("input[name='author-filter']").forEach(input => input.checked = false);
      activeFilter.category = selectedCategories[0]; // Set the active category
      activeFilter.author = null; // Reset the author filter
    }

    // If an author is selected, uncheck all category filters
    if (selectedAuthors.length > 0) {
      document.querySelectorAll("input[name='category-filter']").forEach(input => input.checked = false);
      activeFilter.author = selectedAuthors[0]; // Set the active author
      activeFilter.category = null; // Reset the category filter
    }

    // Hide books that don't match the selected filter
    document.querySelectorAll('.book-card').forEach(($card) => {
      const categories = $card.getAttribute('data-category').split(', ');
      const authors = $card.getAttribute('data-author').split(', ');

      // Filtering logic: only match category OR author, not both simultaneously
      const categoryMatch = selectedCategories.length === 0 || selectedCategories.some((category) => categories.includes(category));
      const authorMatch = selectedAuthors.length === 0 || selectedAuthors.some((author) => authors.includes(author));

      // Show the book only if it matches the selected category OR author
      if (categoryMatch && authorMatch) {
        $card.classList.remove('hidden');
      } else {
        $card.classList.add('hidden');
      }
    });
  };

  // Ensures the event listeners are applied after the page load
  document.addEventListener('DOMContentLoaded', () => {
    const options = document.querySelectorAll('.filteroption');
    options.forEach((option) => {
      option.addEventListener('change', (e) => {
        // If the filter is already active, clicking it again should deselect it
        if (e.target.checked && activeFilter[e.target.dataset.type] === e.target.value) {
          e.target.checked = false;
          activeFilter[e.target.dataset.type] = null;
        } else {
          handleOptionChange(e);
        }
      });
    });
  });
</script>

<style>
  ul {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
    justify-content: center;
  }

  input {
    display: none;
  }

  label {
    padding: 0.5rem 1rem;
    background-color: #e0e0e0;
    border-radius: 4px;
  }

  label:hover {
    background-color: #333;
    color: white;
  }

  label:has(input:checked) {
    background-color: #333;
    color: white;
  }

  .book-card {
    padding: 1rem;
    border: 1px solid #ddd;
  }

  .hidden {
    display: none;
  }

  .card-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(15rem, 1fr));
    gap: 1.5rem;
  }
</style>
