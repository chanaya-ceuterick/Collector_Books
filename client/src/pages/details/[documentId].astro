---
import Layout from "../../layouts/Layout.astro";
import Card from "../../components/Cards.astro";
import fetchApi from "../../lib/strapi";

// Fetch book data with Strapi
export async function getStaticPaths() {
  const bookDetail = await fetchApi({
    endpoint: "books",
    wrappedByKey: "data",
    query: { populate: ["cover", "categories", "authors"] },
  });

  const paths = bookDetail.map((book) => ({
    params: { documentId: book.documentId.toString() },
    props: {
      book, // Pass the full book object as a prop
    },
  }));

  return paths;
}

// Access the book prop passed to the component
const { book } = Astro.props;
const coverUrl = `http://localhost:1337${book.cover?.url}`;

// Initialize otherBooks as an empty array
let otherBooks = [];

// Fetch books from the same category, only if the book has categories
if (book.categories && book.categories.length > 0) {
  try {
    const categoryId = book.categories[0].documentId; // Use the first category's ID

    // Fetch the category data from Strapi
    const response = await fetch(`http://localhost:1337/api/categories/${categoryId}?populate=books.cover`);
    const categoryData = await response.json();

    // Check if the category data contains books
    if (categoryData.data && categoryData.data.books) {
      otherBooks = categoryData.data.books || []; // Get books from the same category

      // Filter out the current book from the list of other books
      otherBooks = otherBooks.filter((otherBook) => otherBook.documentId !== book.documentId);
    }
  } catch (error) {
    console.error("Error fetching books for the same category:", error);
  }
}

// Combine book title with category name
const categoryName = book.categories && book.categories.length > 0 ? book.categories[0].name : "Unknown Category";
const fullTitle = `${book.title} - ${categoryName}`;
---

<Layout>
  <section class="detailBookInfo">
    <img src={coverUrl} alt={book.title} class="detailBookInfo__img" />
    <div>
      <h1 class="detailBookInfo__title">{fullTitle}</h1> <!-- Title includes category name -->
      <p class="detailBookInfo__desc">{book.description}</p>
     
      <div class="detailBookInfo__cats">
        <h3 class="detailBookInfo__price">&euro; {book.price}</h3>
        <button class="detailBookInfo__btn">BUY</button>
      </div>
     
      <div class="detailBookInfo__author">
        {book.authors && book.authors.length > 0 && (
          <h2>{book.authors[0].name}</h2> 
          <p>{book.authors[0].bio}</p>
        )}
        <p class="detailBookInfo__pub">Published date: {book.publishedDate}</p>
      </div>

      <div class="detailBookInfo__categories">
        <h3>Categories:</h3>
        <div class="detailBookInfo__cats">
          {
            book.categories && book.categories.length > 0 ? (
              book.categories.map((category) => (
                <p class="detailBookInfo__cat" key={category.id}>
                  {category.name}
                </p> 
              ))
            ) : (
              <p>No categories available</p> 
            )
          }
        </div>
      </div>
    </div>
  </section>

  <!-- Section for displaying other books in the same category -->
  <section class="otherBooks">
    <h2>Other Books in the Same Category: {categoryName}</h2> <!-- Display category name in section -->
    <div class="otherBooks__list">
      {otherBooks.length > 0 ? (
        otherBooks.slice(0, 5).map((otherBook) => {
          const thumbnail_url_Books = otherBook.cover?.url || "/placeholder-image.jpg";
          return (
             <Card
                key={otherBook.documentId}
                book={otherBook}
                thumbnailUrl={import.meta.env.STRAPI_URL + thumbnail_url_Books}
              />
          );
        })
      ) : (
        <p>No other books available in the same category</p>
      )}
    </div>
  </section>
</Layout>

<style>
  .detailBookInfo {
    display: flex;
    flex-direction: row;
    gap: var(--s2);
    margin: 0;
  }

  .detailBookInfo__img {
    width: 30vw;
    height: auto;
    object-fit: cover;
  }

  .detailBookInfo__title {
    color: var(--c-darkgreen);
    font-size: var(--s3);
    padding: var(--s2) 0;
  }

  .detailBookInfo__desc {
    padding: 0;
  }

  .detailBookInfo__price {
    font-size: var(--s15);
  }

  .detailBookInfo__author{
    margin: var(--s2) 0;
  }

  .detailBookInfo__pub {
    margin-top: var(--s1);
  }

  .detailBookInfo__cats {
    margin-top: var(--s2);
  }

  .detailBookInfo__cats p {
    font-size: var(--s1);
    padding: var(--s05);
  }

  .detailBookInfo__cats {
    display: flex;
    flex-direction: row;
    gap: var(--s1);
    align-items: center;
    margin-bottom: var(--s2);
  }

  .detailBookInfo__cat {
    background-color: grey;
    color: white;
    font-size: 12px;
    padding: var(--s2) var(--s1);
    border: none;
    border-radius: var(--border-radius);
    cursor: default;
  }

  .detailBookInfo__btn {
    padding: 1rem 2rem;
  }

  

  .otherBooks {
    margin-top: var(--s3);
  }

  .otherBooks__list {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }

</style>
